AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a static website using S3, then a backend with API GW, Cognito, lambdas and DynamoDB

# input parameters of the template
Parameters:
  SourceBucketName:
    Type: String
    Description: The name for the bucket where all static resources have been uploaded before
    Default: skiagenda-rawdata

Resources:

  # Cognito identity management
  UserPool:
    Type: AWS::Cognito::UserPool
    Description: Cognito pool to register and authenticate users
    Properties:
      UserPoolName: skiagenda
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      UserPoolTags: 
        app: "skiagenda"
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Description: Cognito client app
    Properties:
      ClientName: skiagenda
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      Tags: 
        - Key: "app"
          Value: "skiagenda"
            
  # lambda functions
  BackendRole:
    Type: AWS::IAM::Role
    Description: "Role for backend lambda granting access to DynamoDB"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBWriteAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 
                  - dynamodb:*
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
      # permission issue
      #Tags: 
      #  - Key: "app"
      #    Value: "skiagenda"
  # reservations functions
  AddReservationFunction:
    Type: AWS::Lambda::Function
    Description: "The function used to insert a reservation for a given period"
    DependsOn:
      - "BackendRole"
    Properties:
      FunctionName: AddReservationFunction
      Handler: addReservation.handler
      Runtime: nodejs16.x
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: services/reservations.zip
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  AddReservationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref AddReservationFunction]]
      RetentionInDays: 7 # days
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  ListReservationsFunction:
    Type: AWS::Lambda::Function
    Description: "The function used to list reservations over 3 months"
    DependsOn:
      - "BackendRole"
    Properties:
      FunctionName: ListReservationsFunction
      Handler: listReservations.handler
      Runtime: nodejs16.x
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: services/reservations.zip        
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  ListReservationsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref ListReservationsFunction]]
      RetentionInDays: 7 # days
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  DeleteReservationFunction:
    Type: AWS::Lambda::Function
    Description: "The function used to delete a particular reservations"
    DependsOn:
      - "BackendRole"
    Properties:
      FunctionName: DeleteReservationFunction
      Handler: deleteReservation.handler
      Runtime: nodejs16.x
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: services/reservations.zip
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  DeleteReservationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref DeleteReservationFunction]]
      RetentionInDays: 7 # days
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  UpdateReservationFunction:
    Type: AWS::Lambda::Function
    Description: "The function used to update a particular reservations"
    DependsOn:
      - "BackendRole"
    Properties:
      FunctionName: UpdateReservationFunction
      Handler: updateReservation.handler
      Runtime: nodejs16.x
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: services/reservations.zip        
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  UpdateReservationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref UpdateReservationFunction]]
      RetentionInDays: 7 # days
      Tags: 
        - Key: "app"
          Value: "skiagenda"

  # holidays functions
  ListHolidaysFunction:
    Type: AWS::Lambda::Function
    Description: "The function used to list bank holidays for the 3 zones in France"
    DependsOn:
      - "BackendRole"
    Properties:
      FunctionName: ListHolidaysFunction
      Handler: holidaysList.handler
      Runtime: nodejs16.x
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: services/holidays.zip        
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  ListHolidaysLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref ListHolidaysFunction]]
      RetentionInDays: 7 # days
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  RefreshHolidaysFunction:
    Type: AWS::Lambda::Function
    Description: "The function used to list bank holidays for the 3 zones in France"
    DependsOn:
      - "BackendRole"
    Properties:
      FunctionName: RefreshHolidaysFunction
      Handler: holidaysRefresh.handler
      Runtime: nodejs16.x
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: services/holidays.zip                
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  RefreshHolidaysLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref RefreshHolidaysFunction]]
      RetentionInDays: 7 # days
      Tags: 
        - Key: "app"
          Value: "skiagenda"

  # API Gateway exposing our lambda functions
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Description: create a REST API that will expose our lambda functions
    Properties:
      Name: skiagenda
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  RestApiAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Description: "create an authorizer that will control access to this API using the CognitoPool we created before"
    DependsOn:
      - "RestApi"
      - "UserPool"
    Properties:
      ProviderARNs: 
        - !GetAtt UserPool.Arn
      AuthorizerResultTtlInSeconds: '300'
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      Name: skiagenda
      RestApiId: !Ref RestApi
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  Resa:
    Type: 'AWS::ApiGateway::Resource'
    Description: "create a resource"
    DependsOn:
      - "RestApi"
      - "RestApiAuthorizer"
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt 
        - RestApi
        - RootResourceId
      PathPart: resa
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  Holidays:
    Type: 'AWS::ApiGateway::Resource'
    Description: "create a resource"
    DependsOn:
      - "RestApi"
      - "RestApiAuthorizer"
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt 
        - RestApi
        - RootResourceId
      PathPart: holidays
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  ResaOptionsMethod:
    Type: AWS::ApiGateway::Method
    Description: Enable CORS on our resource
    Properties:
      ResourceId: !Ref Resa
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  HolidaysOptionsMethod:
    Type: AWS::ApiGateway::Method
    Description: Enable CORS on our resource
    Properties:
      ResourceId: !Ref Holidays
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  PostMethod:
    Type: AWS::ApiGateway::Method
    Description: "then a method"
    DependsOn:
      - "Resa"
      - "AddReservationFunction"
      - "RestApiAuthorizer"
      - "RestApi"
    Properties:
      HttpMethod: "POST"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "AddReservationFunction.Arn"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: ''
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref Resa
      RestApiId: !Ref RestApi
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  ResaGetMethod:
    Type: AWS::ApiGateway::Method
    Description: "then a method"
    DependsOn:
      - "Resa"
      - "ListReservationsFunction"
      - "RestApiAuthorizer"
      - "RestApi"
    Properties:
      HttpMethod: "GET"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "ListReservationsFunction.Arn"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        #PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: "{\"month\": \"$input.params('month')\"}"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref Resa
      RestApiId: !Ref RestApi
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  HolidaysGetMethod:
    Type: AWS::ApiGateway::Method
    Description: "then a method"
    DependsOn:
      - "Holidays"
      - "ListHolidaysFunction"
      - "RestApiAuthorizer"
      - "RestApi"
    Properties:
      HttpMethod: "GET"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "ListHolidaysFunction.Arn"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        #PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: "{\"month\": \"$input.params('month')\"}"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref Holidays
      RestApiId: !Ref RestApi
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  ResaUpdateMethod:
    Type: AWS::ApiGateway::Method
    Description: "then a method"
    DependsOn:
      - "Resa"
      - "UpdateReservationFunction"
      - "RestApiAuthorizer"
    Properties:
      HttpMethod: "PUT"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "UpdateReservationFunction.Arn"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        #PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: ''
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref Resa
      RestApiId: !Ref RestApi
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  HolidaysRefreshMethod:
    Type: AWS::ApiGateway::Method
    Description: "then a method"
    DependsOn:
      - "Holidays"
      - "RefreshHolidaysFunction"
      - "RestApiAuthorizer"
    Properties:
      HttpMethod: "PUT"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "RefreshHolidaysFunction.Arn"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        #PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: ''
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref Holidays
      RestApiId: !Ref RestApi
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  DeleteMethod:
    Type: AWS::ApiGateway::Method
    Description: "then a method"
    DependsOn:
      - "Resa"
      - "DeleteReservationFunction"
      - "RestApiAuthorizer"
    Properties:
      HttpMethod: "DELETE"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "DeleteReservationFunction.Arn"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: ''
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref Resa
      RestApiId: !Ref RestApi
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  Deployment:
    Type: AWS::ApiGateway::Deployment
    Description: "then a deployemt & stage"
    DependsOn:
      - "ResaGetMethod"
      - "HolidaysGetMethod"
      - "PostMethod"
      - "ResaOptionsMethod"
      - "HolidaysOptionsMethod"
      - "DeleteMethod"
      - "ResaUpdateMethod"
      - "HolidaysRefreshMethod"
    Properties:
      RestApiId: !Ref RestApi
      StageName: prod
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  InvokeResaGetPermission:
    Type: "AWS::Lambda::Permission"
    Description: "grant the API gateway the right to invoke listReservationsFunction"
    DependsOn:
      - "ResaGetMethod"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "ListReservationsFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/resa"
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  InvokeHolidaysGetPermission:
    Type: "AWS::Lambda::Permission"
    Description: "grant the API gateway the right to invoke listReservationsFunction"
    DependsOn:
      - "HolidaysGetMethod"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "ListHolidaysFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/holidays"
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  InvokeResaPostPermission:
    Type: "AWS::Lambda::Permission"
    Description: "grant the API gateway the right to invoke addReservationFunction"
    DependsOn:
      - "PostMethod"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "AddReservationFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/resa"
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  InvokeHolidaysPutPermission:
    Type: "AWS::Lambda::Permission"
    Description: "grant the API gateway the right to invoke addReservationFunction"
    DependsOn:
      - "HolidaysRefreshMethod"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "RefreshHolidaysFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PUT/holidays"
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  InvokePutPermission:
    Type: "AWS::Lambda::Permission"
    Description: "grant the API gateway the right to invoke updateReservationFunction"
    DependsOn:
      - "ResaUpdateMethod"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "UpdateReservationFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PUT/resa"
      Tags: 
        - Key: "app"
          Value: "skiagenda"
  InvokeDeletePermission:
    Type: "AWS::Lambda::Permission"
    Description: "grant the API gateway the right to invoke deleteReservationFunction"
    DependsOn:
      - "DeleteMethod"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "DeleteReservationFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/resa"
      Tags: 
        - Key: "app"
          Value: "skiagenda"

Outputs:
  apiURL:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: apiURL
  userPoolId: 
    Value: !Ref UserPool
    Export:
      Name: userPoolId
  userPollClientId: 
    Value: !Ref UserPoolClient
    Export:
      Name: userPollClientId
